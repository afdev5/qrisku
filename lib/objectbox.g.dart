// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/convert_qris_model.dart';
import 'models/info_qris_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4926969378227210198),
      name: 'InfoQrisModel',
      lastPropertyId: const IdUid(8, 9194802429701303094),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 357513995665571375),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5873629002209903155),
            name: 'idQris',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2192692213083123333),
            name: 'nmId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5415803257563530285),
            name: 'merchantName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3802964977061114749),
            name: 'pencetak',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2630445001898515148),
            name: 'nns',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1000892027392050194),
            name: 'crc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 9194802429701303094),
            name: 'defaultCode',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6052130115711228846),
      name: 'ConvertQrisModel',
      lastPropertyId: const IdUid(5, 6673868141499973978),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7268303825882968023),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4891668730381067859),
            name: 'dateTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1423917348340763101),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4490901541058138945),
            name: 'nominal',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6673868141499973978),
            name: 'dataQr',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6052130115711228846),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    InfoQrisModel: EntityDefinition<InfoQrisModel>(
        model: _entities[0],
        toOneRelations: (InfoQrisModel object) => [],
        toManyRelations: (InfoQrisModel object) => {},
        getId: (InfoQrisModel object) => object.id,
        setId: (InfoQrisModel object, int id) {
          object.id = id;
        },
        objectToFB: (InfoQrisModel object, fb.Builder fbb) {
          final idQrisOffset = fbb.writeString(object.idQris);
          final nmIdOffset = fbb.writeString(object.nmId);
          final merchantNameOffset = fbb.writeString(object.merchantName);
          final pencetakOffset = fbb.writeString(object.pencetak);
          final nnsOffset =
              object.nns == null ? null : fbb.writeString(object.nns!);
          final crcOffset = fbb.writeString(object.crc);
          final defaultCodeOffset = fbb.writeString(object.defaultCode);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, idQrisOffset);
          fbb.addOffset(2, nmIdOffset);
          fbb.addOffset(3, merchantNameOffset);
          fbb.addOffset(4, pencetakOffset);
          fbb.addOffset(5, nnsOffset);
          fbb.addOffset(6, crcOffset);
          fbb.addOffset(7, defaultCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = InfoQrisModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              crc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              idQris: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              merchantName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              nmId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              nns: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              pencetak: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              defaultCode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''));

          return object;
        }),
    ConvertQrisModel: EntityDefinition<ConvertQrisModel>(
        model: _entities[1],
        toOneRelations: (ConvertQrisModel object) => [],
        toManyRelations: (ConvertQrisModel object) => {},
        getId: (ConvertQrisModel object) => object.id,
        setId: (ConvertQrisModel object, int id) {
          object.id = id;
        },
        objectToFB: (ConvertQrisModel object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final nominalOffset = fbb.writeString(object.nominal);
          final dataQrOffset = fbb.writeString(object.dataQr);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dateTime.millisecondsSinceEpoch);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, nominalOffset);
          fbb.addOffset(4, dataQrOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ConvertQrisModel(
              dateTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              nominal: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              dataQr: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [InfoQrisModel] entity fields to define ObjectBox queries.
class InfoQrisModel_ {
  /// see [InfoQrisModel.id]
  static final id =
      QueryIntegerProperty<InfoQrisModel>(_entities[0].properties[0]);

  /// see [InfoQrisModel.idQris]
  static final idQris =
      QueryStringProperty<InfoQrisModel>(_entities[0].properties[1]);

  /// see [InfoQrisModel.nmId]
  static final nmId =
      QueryStringProperty<InfoQrisModel>(_entities[0].properties[2]);

  /// see [InfoQrisModel.merchantName]
  static final merchantName =
      QueryStringProperty<InfoQrisModel>(_entities[0].properties[3]);

  /// see [InfoQrisModel.pencetak]
  static final pencetak =
      QueryStringProperty<InfoQrisModel>(_entities[0].properties[4]);

  /// see [InfoQrisModel.nns]
  static final nns =
      QueryStringProperty<InfoQrisModel>(_entities[0].properties[5]);

  /// see [InfoQrisModel.crc]
  static final crc =
      QueryStringProperty<InfoQrisModel>(_entities[0].properties[6]);

  /// see [InfoQrisModel.defaultCode]
  static final defaultCode =
      QueryStringProperty<InfoQrisModel>(_entities[0].properties[7]);
}

/// [ConvertQrisModel] entity fields to define ObjectBox queries.
class ConvertQrisModel_ {
  /// see [ConvertQrisModel.id]
  static final id =
      QueryIntegerProperty<ConvertQrisModel>(_entities[1].properties[0]);

  /// see [ConvertQrisModel.dateTime]
  static final dateTime =
      QueryIntegerProperty<ConvertQrisModel>(_entities[1].properties[1]);

  /// see [ConvertQrisModel.title]
  static final title =
      QueryStringProperty<ConvertQrisModel>(_entities[1].properties[2]);

  /// see [ConvertQrisModel.nominal]
  static final nominal =
      QueryStringProperty<ConvertQrisModel>(_entities[1].properties[3]);

  /// see [ConvertQrisModel.dataQr]
  static final dataQr =
      QueryStringProperty<ConvertQrisModel>(_entities[1].properties[4]);
}
